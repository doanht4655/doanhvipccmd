import json
import logging
import os
import threading
import time
from datetime import datetime
from flask import Flask, jsonify
from websocket import WebSocketApp

# ======================
# üìù Thi·∫øt l·∫≠p logging
# ======================
# T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a c√≥
os.makedirs("logs", exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/taixiu_api.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("TaiXiuAPI")

# ======================
# üîó Bi·∫øn l∆∞u phi√™n m·ªõi nh·∫•t
# ======================
latest_result = {
    "sid": None,
    "md5": None,
    "dices": None,
    "total": None,
    "result": None,
    "timestamp": None
}
latest_result_lock = threading.Lock()

WS_URL = "wss://mynygwais.hytsocesk.com/websocket"
ws_instance = None
ws_reconnect_count = 0
ws_last_activity = time.time()
is_ws_connected = False

# ======================
# üéß WebSocket Callbacks
# ======================
def on_open(ws):
    global is_ws_connected, ws_last_activity, ws_reconnect_count
    is_ws_connected = True
    ws_last_activity = time.time()
    ws_reconnect_count = 0
    logger.info("[+] WebSocket ƒë√£ k·∫øt n·ªëi")

    auth_payload = [
        1,
        "MiniGame",
        "",
        "",
        {
            "agentId": "1",
            "accessToken": "1-a29d6159d76d7dcb02ef52fbdfd21e1d",
            "reconnect": False
        }
    ]
    ws.send(json.dumps(auth_payload))
    logger.info("[>] ƒê√£ g·ª≠i x√°c th·ª±c")

    def send_cmd():
        time.sleep(1)
        cmd_payload = [
            6,
            "MiniGame",
            "taixiuKCBPlugin",
            {"cmd": 2001}
        ]
        try:
            ws.send(json.dumps(cmd_payload))
            logger.info("[>] ƒê√£ g·ª≠i cmd 2001")
        except Exception as e:
            logger.error(f"[!] L·ªói g·ª≠i cmd: {str(e)}")
    
    threading.Thread(target=send_cmd, daemon=True).start()


def on_message(ws, message):
    global ws_last_activity
    ws_last_activity = time.time()
    
    try:
        data = json.loads(message)

        if isinstance(data, list) and len(data) == 2 and data[0] == 5 and isinstance(data[1], dict):
            payload = data[1]

            if "d" in payload and isinstance(payload["d"], dict):
                d = payload["d"]
                cmd = d.get("cmd")
                sid = d.get("sid")
                md5 = d.get("md5")

                with latest_result_lock:
                    if cmd == 2006 and all(k in d for k in ["d1", "d2", "d3"]):
                        # C√≥ k·∫øt qu·∫£
                        d1, d2, d3 = d["d1"], d["d2"], d["d3"]
                        total = d1 + d2 + d3
                        result = "T√†i" if total >= 11 else "X·ªâu"

                        latest_result.update({
                            "sid": sid,
                            "md5": md5,
                            "dices": [d1, d2, d3],
                            "total": total,
                            "result": result,
                            "timestamp": time.time()
                        })

                        logger.info(f"‚úÖ Phi√™n {sid}: {d1}-{d2}-{d3} = {total} ‚ûú {result} | MD5: {md5}")

                    elif cmd == 2005:
                        # Phi√™n ti·∫øp theo ch∆∞a c√≥ k·∫øt qu·∫£
                        latest_result.update({
                            "sid": sid,
                            "md5": md5,
                            "dices": None,
                            "total": None,
                            "result": None,
                            "timestamp": time.time()
                        })

                        logger.info(f"‚è≠Ô∏è Phi√™n k·∫ø ti·∫øp: {sid} | MD5: {md5} (ch∆∞a c√≥ k·∫øt qu·∫£)")

    except Exception as e:
        logger.error(f"[!] L·ªói x·ª≠ l√Ω: {str(e)}")


def on_error(ws, error):
    logger.error(f"[!] WebSocket l·ªói: {str(error)}")


def on_close(ws, close_status_code, close_msg):
    global is_ws_connected
    is_ws_connected = False
    logger.warning(f"[x] WebSocket ƒë√£ ƒë√≥ng (code: {close_status_code})")
    
    # X·ª≠ l√Ω k·∫øt n·ªëi l·∫°i s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán b·ªüi watchdog thread


# ======================
# üöÄ Ch·∫°y WebSocket
# ======================
def run_ws():
    global ws_instance, is_ws_connected, ws_reconnect_count
    
    try:
        if ws_instance is not None:
            try:
                ws_instance.close()
            except:
                pass
        
        ws_reconnect_count += 1
        logger.info(f"[*] ƒêang k·∫øt n·ªëi WebSocket l·∫ßn {ws_reconnect_count}...")
        
        ws = WebSocketApp(
            WS_URL,
            on_open=on_open,
            on_message=on_message,
            on_error=on_error,
            on_close=on_close
        )
        ws_instance = ws
        
        # Kh·ªüi ƒë·ªông WebSocket trong thread ri√™ng
        wst = threading.Thread(target=lambda: ws.run_forever())
        wst.daemon = True
        wst.start()
        
        return True
    except Exception as e:
        logger.error(f"[!] L·ªói kh·ªüi ƒë·ªông WebSocket: {str(e)}")
        is_ws_connected = False
        return False


# ======================
# üîç Thread gi√°m s√°t k·∫øt n·ªëi
# ======================
def watchdog_thread():
    """Thread li√™n t·ª•c ki·ªÉm tra v√† ƒë·∫£m b·∫£o WebSocket k·∫øt n·ªëi"""
    global ws_last_activity, is_ws_connected, ws_reconnect_count
    
    while True:
        try:
            current_time = time.time()
            # N·∫øu kh√¥ng ho·∫°t ƒë·ªông trong 60 gi√¢y ho·∫∑c r√µ r√†ng ƒë√£ m·∫•t k·∫øt n·ªëi
            if (current_time - ws_last_activity > 60) or not is_ws_connected:
                logger.warning("[!] Ph√°t hi·ªán m·∫•t k·∫øt n·ªëi, ƒëang k·∫øt n·ªëi l·∫°i...")
                run_ws()
                
                # ƒê·ª£i k·∫øt n·ªëi m·ªôt th·ªùi gian tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
                time.sleep(10)
            
            # G·ª≠i ping ƒë·ªÉ gi·ªØ k·∫øt n·ªëi Render kh√¥ng ng·ªß
            if current_time - ws_last_activity > 30 and is_ws_connected and ws_instance:
                try:
                    ws_instance.send("ping")
                    logger.debug("[>] ƒê√£ g·ª≠i ping ƒë·ªÉ gi·ªØ k·∫øt n·ªëi")
                except:
                    logger.warning("[!] Kh√¥ng th·ªÉ g·ª≠i ping, c√≥ th·ªÉ ƒë√£ m·∫•t k·∫øt n·ªëi")
                    is_ws_connected = False
            
            # L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i ƒë·ªÉ kh√¥i ph·ª•c n·∫øu c√≥ restart
            with latest_result_lock:
                backup_data = latest_result.copy()
            
            try:
                with open("logs/backup.json", "w") as f:
                    json.dump(backup_data, f)
            except Exception as e:
                logger.error(f"[!] L·ªói khi l∆∞u backup: {str(e)}")
            
            # Log tr·∫°ng th√°i ƒë·ªãnh k·ª≥ (1 gi·ªù 1 l·∫ßn)
            if int(current_time) % 3600 < 10:  # Ghi log khi gi√¢y trong ph·∫°m vi 0-9 c·ªßa m·ªói gi·ªù
                logger.info(f"[*] H·ªá th·ªëng ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng | WS k·∫øt n·ªëi: {is_ws_connected}")
                
        except Exception as e:
            logger.error(f"[!] L·ªói trong watchdog: {str(e)}")
        
        # Ki·ªÉm tra m·ªói 5 gi√¢y
        time.sleep(5)


# ======================
# üåê Flask API (CH·ªà JSON)
# ======================
app = Flask(__name__)

@app.route("/", methods=["GET"])
def home():
    return "‚úÖ API T√†i X·ªâu ƒëang ho·∫°t ƒë·ªông!"

@app.route("/api/latest", methods=["GET"])
def get_latest():
    with latest_result_lock:
        result = latest_result.copy()

    # ƒê·∫£m b·∫£o dices lu√¥n l√† [None, None, None] n·∫øu ch∆∞a c√≥
    if result["dices"] is None:
        result["dices"] = [None, None, None]

    # Hi·ªÉn th·ªã "ƒêang ƒë·ª£i k·∫øt qu·∫£..." n·∫øu ch∆∞a c√≥ result
    if result["result"] is None:
        result["result"] = "ƒêang ƒë·ª£i k·∫øt qu·∫£..."

    return jsonify(result)

@app.route("/api/health", methods=["GET"])
def health_check():
    """API ki·ªÉm tra s·ª©c kh·ªèe h·ªá th·ªëng - gi√∫p Render bi·∫øt ·ª©ng d·ª•ng c√≤n s·ªëng"""
    return jsonify({
        "status": "healthy",
        "ws_connected": is_ws_connected,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })

@app.route("/api/reconnect", methods=["GET"])
def force_reconnect():
    """API ƒë·ªÉ k√≠ch ho·∫°t k·∫øt n·ªëi l·∫°i WebSocket th·ªß c√¥ng"""
    success = run_ws()
    return jsonify({
        "success": success,
        "message": "ƒê√£ y√™u c·∫ßu k·∫øt n·ªëi l·∫°i WebSocket",
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })


# ======================
# üîÑ Kh√¥i ph·ª•c d·ªØ li·ªáu
# ======================
def load_backup():
    try:
        backup_file = "logs/backup.json"
        if os.path.exists(backup_file):
            with open(backup_file, "r") as f:
                data = json.load(f)
            
            if isinstance(data, dict) and "sid" in data:
                with latest_result_lock:
                    latest_result.update(data)
                logger.info(f"[+] ƒê√£ kh√¥i ph·ª•c d·ªØ li·ªáu backup | Phi√™n: {data.get('sid')}")
    except Exception as e:
        logger.error(f"[!] L·ªói khi kh√¥i ph·ª•c d·ªØ li·ªáu: {str(e)}")


# ======================
# üîß Kh·ªüi ƒë·ªông h·ªá th·ªëng
# ======================
def start_system():
    """Kh·ªüi ƒë·ªông to√†n b·ªô h·ªá th·ªëng"""
    logger.info("="*50)
    logger.info("üöÄ KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG API T√ÄI X·ªàU")
    logger.info("="*50)
    
    # Kh√¥i ph·ª•c d·ªØ li·ªáu backup n·∫øu c√≥
    load_backup()
    
    # Kh·ªüi ƒë·ªông WebSocket
    run_ws()
    
    # Kh·ªüi ƒë·ªông thread gi√°m s√°t
    watchdog = threading.Thread(target=watchdog_thread, daemon=True)
    watchdog.start()
    
    logger.info("[+] H·ªá th·ªëng ƒë√£ kh·ªüi ƒë·ªông ho√†n t·∫•t")


# ======================
# üîß Main
# ======================
# Kh·ªüi ƒë·ªông h·ªá th·ªëng ngay khi file ƒë∆∞·ª£c import
start_system()

# C√†i ƒë·∫∑t port t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (Render.com s·∫Ω cung c·∫•p PORT)
port = int(os.environ.get("PORT", 5000))

# Entry point cho Render.com
if __name__ == "__main__":
    # Ch·∫°y Flask v·ªõi port t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    app.run(host="0.0.0.0", port=port, threaded=True)latest_result_lock = threading.Lock()

WS_URL = "wss://mynygwais.hytsocesk.com/websocket"
ws_instance = None
ws_reconnect_count = 0
ws_last_activity = time.time()
is_ws_connected = False

# ======================
# üéß WebSocket Callbacks
# ======================
def on_open(ws):
    global is_ws_connected, ws_last_activity, ws_reconnect_count
    is_ws_connected = True
    ws_last_activity = time.time()
    ws_reconnect_count = 0
    logger.info("[+] WebSocket ƒë√£ k·∫øt n·ªëi")

    auth_payload = [
        1,
        "MiniGame",
        "",
        "",
        {
            "agentId": "1",
            "accessToken": "1-a29d6159d76d7dcb02ef52fbdfd21e1d",
            "reconnect": False
        }
    ]
    ws.send(json.dumps(auth_payload))
    logger.info("[>] ƒê√£ g·ª≠i x√°c th·ª±c")

    def send_cmd():
        time.sleep(1)
        cmd_payload = [
            6,
            "MiniGame",
            "taixiuKCBPlugin",
            {"cmd": 2001}
        ]
        try:
            ws.send(json.dumps(cmd_payload))
            logger.info("[>] ƒê√£ g·ª≠i cmd 2001")
        except Exception as e:
            logger.error(f"[!] L·ªói g·ª≠i cmd: {str(e)}")
    
    threading.Thread(target=send_cmd, daemon=True).start()


def on_message(ws, message):
    global ws_last_activity
    ws_last_activity = time.time()
    
    try:
        data = json.loads(message)

        if isinstance(data, list) and len(data) == 2 and data[0] == 5 and isinstance(data[1], dict):
            payload = data[1]

            if "d" in payload and isinstance(payload["d"], dict):
                d = payload["d"]
                cmd = d.get("cmd")
                sid = d.get("sid")
                md5 = d.get("md5")

                with latest_result_lock:
                    if cmd == 2006 and all(k in d for k in ["d1", "d2", "d3"]):
                        # C√≥ k·∫øt qu·∫£
                        d1, d2, d3 = d["d1"], d["d2"], d["d3"]
                        total = d1 + d2 + d3
                        result = "T√†i" if total >= 11 else "X·ªâu"

                        latest_result.update({
                            "sid": sid,
                            "md5": md5,
                            "dices": [d1, d2, d3],
                            "total": total,
                            "result": result,
                            "timestamp": time.time()
                        })

                        logger.info(f"‚úÖ Phi√™n {sid}: {d1}-{d2}-{d3} = {total} ‚ûú {result} | MD5: {md5}")

                    elif cmd == 2005:
                        # Phi√™n ti·∫øp theo ch∆∞a c√≥ k·∫øt qu·∫£
                        latest_result.update({
                            "sid": sid,
                            "md5": md5,
                            "dices": None,
                            "total": None,
                            "result": None,
                            "timestamp": time.time()
                        })

                        logger.info(f"‚è≠Ô∏è Phi√™n k·∫ø ti·∫øp: {sid} | MD5: {md5} (ch∆∞a c√≥ k·∫øt qu·∫£)")

    except Exception as e:
        logger.error(f"[!] L·ªói x·ª≠ l√Ω: {str(e)}")


def on_error(ws, error):
    logger.error(f"[!] WebSocket l·ªói: {str(error)}")


def on_close(ws, close_status_code, close_msg):
    global is_ws_connected
    is_ws_connected = False
    logger.warning(f"[x] WebSocket ƒë√£ ƒë√≥ng (code: {close_status_code})")
    
    # X·ª≠ l√Ω k·∫øt n·ªëi l·∫°i s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán b·ªüi watchdog thread
    # Kh√¥ng c·∫ßn k·∫øt n·ªëi l·∫°i tr·ª±c ti·∫øp ·ªü ƒë√¢y ƒë·ªÉ tr√°nh recursive


# ======================
# üöÄ Ch·∫°y WebSocket
# ======================
def run_ws():
    global ws_instance, is_ws_connected, ws_reconnect_count
    
    try:
        if ws_instance is not None:
            try:
                ws_instance.close()
            except:
                pass
        
        ws_reconnect_count += 1
        logger.info(f"[*] ƒêang k·∫øt n·ªëi WebSocket l·∫ßn {ws_reconnect_count}...")
        
        ws = WebSocketApp(
            WS_URL,
            on_open=on_open,
            on_message=on_message,
            on_error=on_error,
            on_close=on_close
        )
        ws_instance = ws
        
        # Kh·ªüi ƒë·ªông WebSocket trong thread ri√™ng
        wst = threading.Thread(target=lambda: ws.run_forever())
        wst.daemon = True
        wst.start()
        
        return True
    except Exception as e:
        logger.error(f"[!] L·ªói kh·ªüi ƒë·ªông WebSocket: {str(e)}")
        is_ws_connected = False
        return False


# ======================
# üîç Thread gi√°m s√°t k·∫øt n·ªëi
# ======================
def watchdog_thread():
    """Thread li√™n t·ª•c ki·ªÉm tra v√† ƒë·∫£m b·∫£o WebSocket k·∫øt n·ªëi"""
    global ws_last_activity, is_ws_connected, ws_reconnect_count
    
    while True:
        try:
            current_time = time.time()
            # N·∫øu kh√¥ng ho·∫°t ƒë·ªông trong 60 gi√¢y ho·∫∑c r√µ r√†ng ƒë√£ m·∫•t k·∫øt n·ªëi
            if (current_time - ws_last_activity > 60) or not is_ws_connected:
                logger.warning("[!] Ph√°t hi·ªán m·∫•t k·∫øt n·ªëi, ƒëang k·∫øt n·ªëi l·∫°i...")
                run_ws()
                
                # ƒê·ª£i k·∫øt n·ªëi m·ªôt th·ªùi gian tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
                time.sleep(10)
            
            # G·ª≠i ping ƒë·ªÉ gi·ªØ k·∫øt n·ªëi Render kh√¥ng ng·ªß
            if current_time - ws_last_activity > 30 and is_ws_connected and ws_instance:
                try:
                    ws_instance.send("ping")
                    logger.debug("[>] ƒê√£ g·ª≠i ping ƒë·ªÉ gi·ªØ k·∫øt n·ªëi")
                except:
                    logger.warning("[!] Kh√¥ng th·ªÉ g·ª≠i ping, c√≥ th·ªÉ ƒë√£ m·∫•t k·∫øt n·ªëi")
                    is_ws_connected = False
            
            # L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i ƒë·ªÉ kh√¥i ph·ª•c n·∫øu c√≥ restart
            with latest_result_lock:
                backup_data = latest_result.copy()
            
            try:
                with open("logs/backup.json", "w") as f:
                    json.dump(backup_data, f)
            except Exception as e:
                logger.error(f"[!] L·ªói khi l∆∞u backup: {str(e)}")
            
            # Log tr·∫°ng th√°i ƒë·ªãnh k·ª≥ (1 gi·ªù 1 l·∫ßn)
            if int(current_time) % 3600 < 10:  # Ghi log khi gi√¢y trong ph·∫°m vi 0-9 c·ªßa m·ªói gi·ªù
                logger.info(f"[*] H·ªá th·ªëng ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng | WS k·∫øt n·ªëi: {is_ws_connected}")
                
        except Exception as e:
            logger.error(f"[!] L·ªói trong watchdog: {str(e)}")
        
        # Ki·ªÉm tra m·ªói 5 gi√¢y
        time.sleep(5)


# ======================
# üåê Flask API (CH·ªà JSON)
# ======================
app = Flask(__name__)

@app.route("/", methods=["GET"])
def home():
    return "‚úÖ API T√†i X·ªâu ƒëang ho·∫°t ƒë·ªông!"

@app.route("/api/latest", methods=["GET"])
def get_latest():
    with latest_result_lock:
        result = latest_result.copy()

    # ƒê·∫£m b·∫£o dices lu√¥n l√† [None, None, None] n·∫øu ch∆∞a c√≥
    if result["dices"] is None:
        result["dices"] = [None, None, None]

    # Hi·ªÉn th·ªã "ƒêang ƒë·ª£i k·∫øt qu·∫£..." n·∫øu ch∆∞a c√≥ result
    if result["result"] is None:
        result["result"] = "ƒêang ƒë·ª£i k·∫øt qu·∫£..."

    return jsonify(result)

@app.route("/api/health", methods=["GET"])
def health_check():
    """API ki·ªÉm tra s·ª©c kh·ªèe h·ªá th·ªëng - gi√∫p Render bi·∫øt ·ª©ng d·ª•ng c√≤n s·ªëng"""
    return jsonify({
        "status": "healthy",
        "ws_connected": is_ws_connected,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })

@app.route("/api/reconnect", methods=["GET"])
def force_reconnect():
    """API ƒë·ªÉ k√≠ch ho·∫°t k·∫øt n·ªëi l·∫°i WebSocket th·ªß c√¥ng"""
    success = run_ws()
    return jsonify({
        "success": success,
        "message": "ƒê√£ y√™u c·∫ßu k·∫øt n·ªëi l·∫°i WebSocket",
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })


# ======================
# üîÑ Kh√¥i ph·ª•c d·ªØ li·ªáu
# ======================
def load_backup():
    try:
        backup_file = "logs/backup.json"
        if os.path.exists(backup_file):
            with open(backup_file, "r") as f:
                data = json.load(f)
            
            if isinstance(data, dict) and "sid" in data:
                with latest_result_lock:
                    latest_result.update(data)
                logger.info(f"[+] ƒê√£ kh√¥i ph·ª•c d·ªØ li·ªáu backup | Phi√™n: {data.get('sid')}")
    except Exception as e:
        logger.error(f"[!] L·ªói khi kh√¥i ph·ª•c d·ªØ li·ªáu: {str(e)}")


# ======================
# üîß Kh·ªüi ƒë·ªông h·ªá th·ªëng
# ======================
def start_system():
    """Kh·ªüi ƒë·ªông to√†n b·ªô h·ªá th·ªëng"""
    logger.info("="*50)
    logger.info("üöÄ KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG API T√ÄI X·ªàU")
    logger.info("="*50)
    
    # Kh√¥i ph·ª•c d·ªØ li·ªáu backup n·∫øu c√≥
    load_backup()
    
    # Kh·ªüi ƒë·ªông WebSocket
    run_ws()
    
    # Kh·ªüi ƒë·ªông thread gi√°m s√°t
    watchdog = threading.Thread(target=watchdog_thread, daemon=True)
    watchdog.start()
    
    logger.info("[+] H·ªá th·ªëng ƒë√£ kh·ªüi ƒë·ªông ho√†n t·∫•t")


# ======================
# üîß Main
# ======================
# Kh·ªüi ƒë·ªông h·ªá th·ªëng ngay khi file ƒë∆∞·ª£c import
start_system()

# C√†i ƒë·∫∑t port t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (Render.com s·∫Ω cung c·∫•p PORT)
port = int(os.environ.get("PORT", 5000))

# Entry point cho Render.com
if __name__ == "__main__":
    # Ch·∫°y Flask v·ªõi port t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    app.run(host="0.0.0.0", port=port, threaded=True)
